AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EnvironmentName:
    Type: String
    Description: Name of the environment (e.g., dev, prod)
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet
  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet
  DatabaseName:
    Type: String
    Default: vikunjaDB
    Description: Name of the RDS database
  DatabaseUsername:
    Type: String
    Default: vikunjaUser
    Description: Username for the RDS database
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Password for the RDS database
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnetCIDR
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnetCIDR
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-ECSCluster
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-ECRRepository
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceIdentifier: !Sub ${EnvironmentName}-RDSDatabase
      Engine: postgres
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBInstanceClass: db.t2.micro
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RDSDatabase
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow database access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref PrivateSubnetCIDR
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-LoadBalancer
      Subnets:
        - !Ref PublicSubnet
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LoadBalancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Load Balancer access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-CodeCommitRepository
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${EnvironmentName}-CodePipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Location: !Ref CodePipelineS3Bucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Ref CodeCommitRepository
                BranchName: master
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                DeploymentConfigName: CodeDeployDefault.OneAtATime
              InputArtifacts:
                - Name: BuildOutput
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${CodePipelineS3Bucket}/*
  CodePipelineS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-codepipeline-${AWS::Region}
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${EnvironmentName}-CodeBuildProject
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
      ServiceRole: !GetAtt CodeBuildRole.Arn
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${CodePipelineS3Bucket}/*
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${EnvironmentName}-CodeDeployApplication
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub ${EnvironmentName}-CodeDeployDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-CodeDeployRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:RegisterInstancesWithLoadBalancer
                  - ec2:DeregisterInstancesFromLoadBalancer
                  - autoscaling:CompleteLifecycleAction
                  - autoscaling:Describe*
                  - autoscaling:UpdateAutoScalingGroup
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - '*'
Outputs:
  VpcId:
    Value: !Ref Vpc
    Description: VPC Id
  PublicSubnetId:
    Value: !Ref PublicSubnet
    Description: Public Subnet Id
  PrivateSubnetId:
    Value: !Ref PrivateSubnet
    Description: Private Subnet Id
  RDSDatabaseEndpoint:
    Value: !GetAtt RDSDatabase.Endpoint.Address
    Description: RDS Database Endpoint
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: Load Balancer DNS Name
  CodeCommitRepositoryCloneUrlHttp:
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp
    Description: CodeCommit Repository Clone URL (HTTP)
  CodeCommitRepositoryCloneUrlSsh:
    Value: !GetAtt CodeCommitRepository.CloneUrlSsh
    Description: CodeCommit Repository Clone URL (SSH)
  CodePipelineName:
    Value: !Ref CodePipeline
    Description: CodePipeline Name
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineRole.Arn
    Description: CodePipeline Role ARN
  CodePipelineS3BucketName:
    Value: !Ref CodePipelineS3Bucket
    Description: CodePipeline S3 Bucket Name
  CodeBuildProjectName:
    Value: !Ref CodeBuildProject
    Description: CodeBuild Project Name
  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildRole.Arn
    Description: CodeBuild Role ARN
  CodeDeployApplicationName:
    Value: !Ref CodeDeployApplication
    Description: CodeDeploy Application Name
  CodeDeployDeploymentGroupName:
    Value: !Ref CodeDeployDeploymentGroup
    Description: CodeDeploy Deployment Group Name
  CodeDeployRoleArn:
    Value: !GetAtt CodeDeployRole.Arn
    Description: CodeDeploy Role ARN