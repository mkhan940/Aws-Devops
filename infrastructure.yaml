AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EnvironmentName:
    Type: String
    Description: Name of the environment (e.g., dev, prod)
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet
  PrivateSubnetCIDR1:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet
  PrivateSubnetCIDR2:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for private subnet
  DatabaseName:
    Type: String
    Default: vikunjadb
    Description: Name of the RDS database
  DatabaseUsername:
    Type: String
    Default: vikunjauser
    Description: Username for the RDS database
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Password for the RDS database
  ECRRepoName:
    Type: String
    Default: apiserver
    Description: Repo Name 
  CodeCommitRepo1Name:
    Type: String
    Default: s3frontend
    Description: Frontend Code Repo Name
  CodeCommitRepo2Name:
    Type: String
    Default: ecsbackend
    Description: Backend Code Repo Name
  ECSClusterName:
    Type: String
    Default: vikunja-cluster
    Description: ECS Cluster Name
  FrontendBucketName:
    Type: String
    Default: s3frontend
    Description: Bucket Name to host frontend
  AZ1:
    Type: String
    Default: us-west-2a
    Description: Availability Zone for subnet 1
  AZ2:
    Type: String
    Default: us-west-2b
    Description: Availability Zone for subnet 2
  RDSDBName:
    Type: String
    Default: vikunjadb
    Description: Vikunja RDS Name
  ALBName:
    Type: String
    Default: ecs-alb
    Description: Vikunja ALB Name
  FrontendPipeline:
    Type: String
    Default: s3frontend
    Description: CodePipeline Frontend Name
  ApiPipeline:
    Type: String
    Default: vikunja-backend-ecs
    Description: CodePipeline Backend Name ECS Blue Green
  IndexDocument:
    Type: String
    Default: "index.html"
    Description: S3 Bucket Website Index Document
  ArtifactPipelineBucket:
    Type: String
    Default: codepipeline-us-west-2-368224439013
    Description: CodePipelineS3Bucket
  PipelineRoleName:
    Type: String
    Default: codepipelinerole-ecs
    Description: CodePipelineRole ECS Name
  CodeBuildProjectName:
    Type: String
    Default: vikunja-be-codeduild
    Description: CodeBuild Name
  CodeDeployAppName:
    Type: String
    Default: vikunja-codedeploy
    Description: CodeDeploy App Name
  CodeDeploymentGroup:
    Type: String
    Default: codedeploy-api
    Description: CodeDeploy DeploymentGroup Name
  DeployRoleName:
    Type: String
    Default: vikunja-codedeploy
    Description: CodeDeploy Role Name
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PublicSubnetCIDR
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PrivateSubnetCIDR1
      VpcId: !Ref Vpc
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref PrivateSubnetCIDR2
      VpcId: !Ref Vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internetgateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepoName
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceIdentifier: !Ref RDSDBName
      Engine: MySQL
      EngineVersion: "8.0.33"
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBInstanceClass: db.t2.micro
      Tags:
        - Key: Name
          Value: !Ref RDSDBName
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ALBName
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: !Ref ALBName
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Load Balancer access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  TGBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "TargetGroupBlue"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      HealthCheckPath: "/"
  TGGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "TargetGroupGreen"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref Vpc
      HealthCheckPath: "/"
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            ContentType: text/plain
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ALBListenerRules:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TGBlue
      Conditions:
        - Field: path-pattern
          Values:
            - "/"
      ListenerArn: !Ref ALBListener
      Priority: 1
  ALBListenerRules:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TGGreen
      Conditions:
        - Field: path-pattern
          Values:
            - "/green/*"
      ListenerArn: !Ref ALBListener
      Priority: 2
  ALBListenerRules:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: redirect
          RedirectConfig:
            StatusCode: HTTP_301
            Protocol: HTTPS
            Port: "443"  
      Conditions:
        - Field: path-pattern
          Values:
            - "/frontend/*"
      ListenerArn: !Ref ALBListener
      Priority: 3
  CodeCommitRepository1:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref CodeCommitRepo1Name
  CodeCommitRepository2:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref CodeCommitRepo2Name
  CodePipeline1:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref FrontendPipeline
      RoleArn: !GetAtt CodePipelineRole1.Arn
      ArtifactStore:
        Location: !Ref ArtifactPipelineBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Ref CodeCommitRepo1Name
                BranchName: master
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              RunOrder: 1
              Configuration:
                BucketName: !Ref FrontendBucketName
                Extract: true
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts: []  
  CodePipeline2:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref ApiPipeline
      RoleArn: !GetAtt ApiPipelineRole.Arn
      ArtifactStore:
        Location: !Ref ArtifactPipelineBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Ref CodeCommitRepo1Name
                BranchName: master
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProjectName
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployAppName
                DeploymentGroupName: !Ref CodeDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput
  CodePipelineRole1:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "CodePipelineRole1"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CodePipelinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "codecommit:Get*"
                  - "codecommit:GitPull"
                Resource:
                  - Fn::Sub: "arn:aws:s3:::${VikunjaFrontendBucket}/*"
                  - Fn::Sub: "arn:aws:s3:::${VikunjaFrontendBucket}"
  ApiPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref PipelineRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ArtifactPipelineBucket}/*
  VikunjaFrontendBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref FrontendBucketName
      WebsiteConfiguration:
        IndexDocument: !Ref IndexDocument
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref CodeBuildProjectName
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ArtifactPipelineBucket}/*
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref CodeDeployAppName
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployAppName
      DeploymentGroupName: !Ref CodeDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref DeployRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:RegisterInstancesWithLoadBalancer
                  - ec2:DeregisterInstancesFromLoadBalancer
                  - autoscaling:CompleteLifecycleAction
                  - autoscaling:Describe*
                  - autoscaling:UpdateAutoScalingGroup
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - '*'
Outputs:
  VpcId:
    Value: !Ref Vpc
    Description: VPC Id
  PublicSubnetId:
    Value: !Ref PublicSubnet
    Description: Public Subnet Id
  PrivateSubnetId1:
    Value: !Ref PrivateSubnet1
    Description: Private Subnet Id
  PrivateSubnetId2:
    Value: !Ref PrivateSubnet2
    Description: Private Subnet Id
  RDSDatabaseEndpoint:
    Value: !GetAtt RDSDatabase.Endpoint.Address
    Description: RDS Database Endpoint
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: Load Balancer DNS Name
  CodeCommitRepository1CloneUrlHttp:
    Value: !GetAtt CodeCommitRepository1.CloneUrlHttp
    Description: CodeCommit Repository Clone URL (HTTP)
  CodeCommitRepository2CloneUrlHttp:
    Value: !GetAtt CodeCommitRepository2.CloneUrlHttp
    Description: CodeCommit Repository Clone URL (HTTP)
